#include "/home/terra/TerraNG/terra/TerraNet.defs"
#define MAX_TEMP 600
#define INUNDACAO 0
#define PEDIDO 1
#define RESPOSTA 2
#define RAIZ 11
#define DESTINATARIO 41
#define DESTINATARIO_ALTERNATIVO 23

pktype mensagem from radioMsg with
	var ushort destinatario;
	var ushort temperatura;
	var ushort versao;
	var ushort saltos;
end

var mensagem msgInundacao;
var mensagem msgPedido;
var mensagem msgParaEnfileirar;
var mensagem msgDesenfileirada;
var mensagem msgResposta;
var ushort idLocal = getNodeId();
var ushort versaoLocal = 0;
var ushort versaoPedidoLocal = 0;
var ushort progenitorLocal = 0;
var ushort[4] vizinhosDiretos;
var ubyte vizinhoDireto_idx = 0;
var ushort[4] temperaturas;
var ubyte temperatura_idx = 0;
var ushort tempLocal = 0;
var ushort voltLocal = 0;

temperaturas[0] = 0;
temperaturas[1] = 0;
temperaturas[2] = 0;
temperaturas[3] = 0;

if idLocal == 11 then
	msgInundacao.target = BROADCAST;
	msgInundacao.source = idLocal;
	msgInundacao.type = INUNDACAO;
	msgInundacao.versao = 0;
	msgInundacao.saltos = 0;

	msgPedido.target = BROADCAST;
	msgPedido.source = idLocal;
	msgPedido.type = PEDIDO;
	msgPedido.destinatario = DESTINATARIO;
else
	msgResposta.target = 0; // Progenitor corrente
	msgResposta.source = idLocal;
	msgResposta.type = RESPOSTA;
	msgResposta.destinatario = RAIZ;
	msgResposta.temperatura = 0; // Temperatura corrente
end

par do
	/*
	** Bloco responsavel por verificar a temperatura a cada 10s
	** Acende o LED amarelo como alerta quando a temperatura ultrapassa MAX_TEMP
	*/
	loop do
		par/and do
			emit REQ_TEMP();
			tempLocal = await TEMP;
			if tempLocal > MAX_TEMP then
				emit LED1(ON);
			else
				emit LED1(OFF);
			end
			temperaturas[temperatura_idx] = tempLocal;
			inc temperatura_idx;
			if temperatura_idx == 4 then
				temperatura_idx = 0;
			end
		with
			await 10s;
		end
	end
with
	/*
	** Bloco responsavel por enviar uma inundação a cada 12s
	** Acende o LED vermelho como feedback quando estiver enviando mensagens
	** Exclusivo do nó 11 (raiz)
	*/
	if idLocal == 11 then
		par do
			loop do
				par/and do
					emit LED0(ON);
					emit LED1(ON);
					inc versaoLocal;
					msgInundacao.versao = versaoLocal;
					emit SEND(msgInundacao);
					await SEND_DONE;
					await 2s;
					emit LED0(OFF);
					emit LED1(OFF);
				with
					await 60s;
				end
			end
		with
			loop do
				par/and do
					emit REQ_VOLTS();
					voltLocal = await VOLTS;
					if voltLocal != 1000 then
						emit LED1(ON);
						emit LED2(ON);
						inc versaoPedidoLocal;
						msgPedido.versao = versaoPedidoLocal;
						if voltLocal > 1000 then
							msgPedido.destinatario = DESTINATARIO;
						end
						if voltLocal < 1000 then
							msgPedido.destinatario = DESTINATARIO_ALTERNATIVO;
						end
						emit SEND(msgPedido);
						await SEND_DONE;
						await 2s;
						emit LED1(OFF);
						emit LED2(OFF);
					end
				with
					await 4s;
				end
			end
		end
	end
with
	/*
	** Bloco responsavel por receber e enfileirar mensagens
	*/
	loop do
		msgParaEnfileirar = await RECEIVE;
		qPut(msgParaEnfileirar);
	end
with
	/*
	** Bloco responsavel por desenfileirar e tratar mensagens
	*/
	loop do
		await Q_READY();
		loop do
			if qSize() == 0 then
				break;
			end
			qGet(msgDesenfileirada);
			
			/*
			** Reponsavel por tratar mensagens de inundação (type=0);
			** Caso a versão seja maior que a local, atualiza-se as informações locais e as da mensagem antes de passa-la adiante.
			*/
			if msgDesenfileirada.type == 0 then
				if msgDesenfileirada.versao > versaoLocal then
					emit LED0(ON);
					// Atualizando as informações locais
					versaoLocal = msgDesenfileirada.versao;
					progenitorLocal = msgDesenfileirada.source;
					// Atualizando as informações da mensagem
					msgDesenfileirada.source = idLocal;
					inc msgDesenfileirada.saltos;
					
					await 2s;
					
					emit SEND(msgDesenfileirada);
					await SEND_DONE;
					
					msgDesenfileirada.type = 3;
					msgDesenfileirada.target = progenitorLocal;
					emit SEND(msgDesenfileirada);
					await SEND_DONE;
					emit LED0(OFF);
				end
			else
			
				/*
				** Reponsavel por tratar mensagens de pedidos de temperatura (type=1);
				** Caso o nó seja o destinatario, envia-se uma mensagem para o progenitor contendo a temperaturaLocal e o novo destinatario (raiz);
				** Caso contrario, passará a mensagem adiante.
				*/
				if msgDesenfileirada.type == 1 then
					if msgDesenfileirada.versao > versaoPedidoLocal then
						versaoPedidoLocal = msgDesenfileirada.versao;
						if msgDesenfileirada.destinatario == idLocal then
							emit LED0(ON); // Acende todos os LEDS indicando que o destinatario inicial foi alcançado
							emit LED1(ON);
							emit LED2(ON);
						 	emit REQ_TEMP();
							msgResposta.temperatura = (temperaturas[0]+temperaturas[1]+temperaturas[2]+temperaturas[3])/4;
							msgResposta.target = progenitorLocal;
							msgResposta.versao = versaoPedidoLocal;
							emit SEND(msgResposta);
							await SEND_DONE;
			
							await 2s;
						
							emit LED0(OFF);
							emit LED1(OFF);
							emit LED2(OFF);
						else
							emit LED1(ON);
							msgDesenfileirada.target = BROADCAST;
							msgDesenfileirada.source = idLocal;						
						
							await 2s;
						
							emit SEND(msgDesenfileirada);
							await SEND_DONE;
							emit LED1(OFF);
						end
					end
					
				/*
				** Reponsavel por tratar mensagens de resposta de temperatura (type=2).
				*/
				else
					if msgDesenfileirada.type == 2 then
						if msgDesenfileirada.destinatario == idLocal then
							emit LED0(ON); // Acende todos os LEDS indicando que o destinatario final foi alcançado
							emit LED1(ON);
							emit LED2(ON);
							await 6s;
							emit LED0(OFF);
							emit LED1(OFF);
							emit LED2(OFF);
						else
							emit LED2(ON);
							msgDesenfileirada.target = progenitorLocal;
							
							await 2s;
							
							emit SEND(msgDesenfileirada);
							await SEND_DONE;
							emit LED2(OFF);
						end
					else
						if msgDesenfileirada.type == 3 then
							vizinhosDiretos[vizinhoDireto_idx] = msgDesenfileirada.source;
							inc vizinhoDireto_idx;
							if vizinhoDireto_idx == 4 then
								vizinhoDireto_idx = 0;
							end
						end
					end
				end
			end
			await 1s;
		end
	end
end
