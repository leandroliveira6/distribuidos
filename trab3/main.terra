#include "/home/terra/TerraNG/terra/TerraNet.defs"

/*
** Definições para melhorar a leitura do codigo.
*/
#define MAX_TEMP 600					// Temperatura limite para que o nó acione o LED amarelo de alerta (Parte 1 do projeto)
#define TIPO_INUNDACAO 0				// Tipo usado nas mensagens de inundação
#define TIPO_PEDIDO 1					// Tipo usado nas mensagens de pedido de temperatura
#define TIPO_RESPOSTA 2					// Tipo usado nas respostas dos pedidos de temperatura
#define TIPO_ROTEAMENTO 3				// Tipo usado como resposta a uma mensagem de inundação
#define DIR_SAIDA 0						// Usado quando se quer unicamente fazer o envio de uma mensagem enfileirada
#define DIR_ENTRADA 1					// Usado quando se quer trabalhar em cima de uma mensagem enfileirada
#define NO_RAIZ 11						// Identificador do nó raiz
#define NO_DESTINATARIO 41				// Identificador do nó destinatario dos pedidos de temperatura
#define NO_DESTINATARIO_ALTERNATIVO 23	// Identificador do nó destinatario alternativo para pedidos de temperatura
#define N_LINHAS 4						// Precisa ser igual ao numero de linhas declarado no inicio da simulação
#define N_COLUNAS 4						// Precisa ser igual ao numero de colunas declarado no inicio da simulação

/*
** Tipo mensagem que abrange todas as funcionalidades da aplicação.
*/
pktype mensagem from radioMsg with
	var ushort destinatario;			// Usado para identificar o destinatario de uma mensagem
	var ushort temperatura;				// Usado para carregar a temperatura nos pedidos de temperatura
	var ushort versao;					// Versão das inundações
	var ushort saltos;					// Quantidade de saltos da mensagem, incrementado antes de cada envio de mensagem de inundação
	var ushort origem;					// Origem das mensagens de resposta a mensagem de inundação para roteamento
	var ubyte direcao;					// Direção das mensagens que estão contidas na fila, para abranger tanto as mensagens a serem enviadas quanto as recebidas
end

/*
** Declaração e inicialização das variaveis globais da aplicação.
*/
var ushort idLocal = getNodeId();		// Identificador do nó
var ushort progenitorLocal = 0;			// Identificador do nó progenitor (Source da primeira mensagem de inundação recebida)
var ushort versaoLocal = 0;				// Versão da inundação atual do nó
var ushort tempLocal = 0;				// Usado para receber temperaturas requisitadas
var ushort voltLocal = 0;				// Usado para receber voltagens requisitadas
var ubyte temperatura_idx = 0;			// Indice da temperatura mais antiga do vetor de temperaturas
var ushort[4] temperaturas;				// Vetor para armazenar as 4 ultimas temperaturas registradas para o calculo da media quando for pedido
var ushort[16] tabela_roteamento;		// Precisa ser igual ao N_LINHASxN_COLUNAS definidos acima, não sendo compativel com tamanhos menores

loop i,4 do
	temperaturas[i] = 0;
end
loop i,(N_LINHAS*N_COLUNAS) do
	tabela_roteamento[i] = 0;
end

par do
	/*
	** Bloco responsavel por verificar a temperatura a cada 10s;
	** Acende o LED amarelo como alerta quando a temperatura ultrapassa MAX_TEMP;
	** Guarda a temperatura num vetor de temperaturas, eliminando sempre a mais antiga.
	*/
	loop do
		par/and do
			emit REQ_TEMP();
			tempLocal = await TEMP;
			if tempLocal > MAX_TEMP then
				emit LED2(ON);
			else
				emit LED2(OFF);
			end
			temperaturas[temperatura_idx] = tempLocal;
			inc temperatura_idx;
			if temperatura_idx == 4 then
				temperatura_idx = 0;
			end
		with
			await 10s;
		end
	end
with
	/*
	** Bloco responsavel por iniciar inundações e fazer pedidos de temperatura;
	** Exclusivo do nó 11 (raiz).
	*/
	if idLocal == 11 then
		var mensagem msgRaiz;
		msgRaiz.source = idLocal;
		msgRaiz.direcao = DIR_SAIDA;
		
		par do
			/*
			** Bloco responsavel por enviar uma inundação a cada 100s, acendendo LEDs especificos para fins de visualização que o evento está acontecendo;
			** É incrementado a versão local de inundações e inicializada com zero o numero de saltos antes de cada inundação.
			*/
			loop do
				par/and do
					emit LED0(ON);
					emit LED1(ON);
					emit LED2(TOGGLE);
					await 1s;
					
					inc versaoLocal;
					msgRaiz.versao = versaoLocal;
					msgRaiz.type = TIPO_INUNDACAO;
					msgRaiz.target = BROADCAST;
					msgRaiz.saltos = 0;
					qPut(msgRaiz);
					
					emit LED0(OFF);
					emit LED1(OFF);
					emit LED2(TOGGLE);
				with
					await 100s;
				end
			end
		with
			/*
			** Bloco responsavel por enviar pedidos de temperatura, acendendo LEDs especificos para fins de visualização que o evento está acontecendo;
			** Se a voltagem for maior que 1000, envia-se um pedido para o nó DESTINATARIO (41);
			** Caso a voltagem seja menor que 1000, envia-se para o DESTINATARIO_ALTERNATIVO (23).
			*/
			loop do
				par/and do
					emit REQ_VOLTS();
					voltLocal = await VOLTS;
					if voltLocal != 1000 then
						emit LED0(TOGGLE);
						emit LED1(ON);
						emit LED2(ON);
						await 1s;
						
						msgRaiz.type = TIPO_PEDIDO;
						msgRaiz.direcao = DIR_SAIDA;
						if voltLocal > 1000 then
							msgRaiz.destinatario = NO_DESTINATARIO;
						else/if voltLocal < 1000 then
							msgRaiz.destinatario = NO_DESTINATARIO_ALTERNATIVO;
						end
						
						// Calculo do indice do nó destinatario, para adicionar ao target o nó intermediario mais rapido para chegar ao nó destino
						var ushort index_roteamento = 0;
						loop i,(N_COLUNAS) do
							if msgRaiz.destinatario/10 == (i+1) then
								index_roteamento = msgRaiz.destinatario - (11 + i*(10-N_LINHAS));
								break;
							end
						end
						msgRaiz.target = tabela_roteamento[index_roteamento];
						// Caso o nó não tenha um nó intermediario na tabela de roteamento, o envio será feito em broadcast
						if msgRaiz.target == 0 then
							msgRaiz.target = BROADCAST;
						end
						qPut(msgRaiz);
						
						emit LED0(TOGGLE);
						emit LED1(OFF);
						emit LED2(OFF);
					end
				with
					await 4s;
				end
			end
		end
	end
with
	/*
	** Bloco responsavel por receber mensagens, determinar que elas são de entrada e enfileira-las.
	*/
	loop do
		var mensagem tmp = await RECEIVE;
		tmp.direcao = DIR_ENTRADA;
		qPut(tmp);
	end
with
	/*
	** Bloco responsavel tratar mensagens enfileiradas, sejam elas de entrada ou saida.
	*/
	loop do
		await Q_READY();
		loop do
			// Para o loop quando não há mais mensagens a tratar na fila
			if qSize() == 0 then
				break;
			end
			var mensagem msgRecebida;
			qGet(msgRecebida);
			
			if msgRecebida.direcao == DIR_SAIDA then
				msgRecebida.source = idLocal;
				// Quando a mensagem é do tipo inundação ou tem como alvo todos os nós vizinhos (BROADCAST), é feito o envio da mensagem sem esperar confirmação
				if msgRecebida.type == TIPO_INUNDACAO or msgRecebida.target == BROADCAST then
					emit SEND(msgRecebida);
					await SEND_DONE;
				// Quando a mensagem é unicast, é esperada uma confirmaçao de recebimento após o envio, sendo feito até 10 envios caso não sejam confirmadas
				else
					loop i,10 do
						var ubyte confirmacao;
						emit SEND_ACK(msgRecebida);
						confirmacao = await SEND_DONE_ACK;
						if confirmacao == TRUE then
							break;
						else
							await (idLocal) ms; // Tempo de espera até a proxima tentativa de envio, varia de 11 à 43 ms, depende do idLocal
						end
					end
				end
			else
				msgRecebida.direcao = DIR_SAIDA;
				/*
				** Reponsavel por tratar mensagens de inundação;
				** Caso a versão seja maior que a local, atualiza-se as informações locais e as da mensagem antes de passa-la adiante;
				** Tambem é enviada uma mensagem ao progenitor, informando o proprio nó como origem, para fins de roteamento.
				*/
				msgRecebida.direcao = DIR_SAIDA;
				if msgRecebida.type == TIPO_INUNDACAO then
					if msgRecebida.versao > versaoLocal then
						emit LED0(ON);
						await 1s;
				
						// Atualização da mensagem para passar adiante
						versaoLocal = msgRecebida.versao;
						progenitorLocal = msgRecebida.source;
						inc msgRecebida.saltos;
						qPut(msgRecebida);
				
						// Atualização da mensagem para roteamento
						msgRecebida.target = progenitorLocal;
						msgRecebida.origem = idLocal;
						msgRecebida.type = TIPO_ROTEAMENTO;
						qPut(msgRecebida);
				
						emit LED0(OFF);
					end
				/*
				** Reponsavel por tratar mensagens de pedidos de temperatura;
				** Caso o nó seja o destinatario, calcula-se a media das temperaturas, que é enviada por mensagem aos progenitores até chegar na raiz;
				** Caso contrario, passará a mensagem adiante, sendo necessario novamente o calculo do indice da tabela de roteamento que contem o proximo target.
				*/
				else/if msgRecebida.type == TIPO_PEDIDO then
					if msgRecebida.destinatario == idLocal then
						emit LED0(ON);
						emit LED1(ON);
						emit LED2(ON);
						await 1s;
				
						msgRecebida.type = TIPO_RESPOSTA;
						msgRecebida.destinatario = NO_RAIZ;
						msgRecebida.temperatura = (temperaturas[0]+temperaturas[1]+temperaturas[2]+temperaturas[3])/4;
						msgRecebida.target = progenitorLocal;
						msgRecebida.direcao = DIR_SAIDA;
						qPut(msgRecebida);
				
						emit LED0(OFF);
						emit LED1(OFF);
						emit LED2(OFF);
					else
						emit LED2(ON);
						await 1s;
				
						var ushort index_roteamento = 0;
						loop i,(N_COLUNAS) do
							if msgRecebida.destinatario/10 == (i+1) then
								index_roteamento = msgRecebida.destinatario - (11 + i*(10-N_LINHAS));
								break;
							end
						end
						msgRecebida.target = tabela_roteamento[index_roteamento];
						qPut(msgRecebida);
				
						emit LED2(OFF);
					end
				/*
				** Reponsavel por tratar mensagens de resposta de temperatura;
				** Caso a resposta tenha atingido seu destino, ou seja, chegou ao nó raiz, acende-se todos os LEDs para fins de visualização;
				** Caso contrario, envia-se a mensagem para seu progenitor.
				*/
				else/if msgRecebida.type == TIPO_RESPOSTA then
					if msgRecebida.destinatario == idLocal then
						emit LED0(ON); // Acende todos os LEDS indicando que o destinatario final foi alcançado
						emit LED1(ON);
						emit LED2(ON);
						await 6s;
						emit LED0(OFF);
						emit LED1(OFF);
						emit LED2(OFF);
					else
						emit LED2(ON);
						await 1s;
				
						msgRecebida.target = progenitorLocal;
						qPut(msgRecebida);
				
						emit LED2(OFF);
					end
				/*
				** Reponsavel por guardar na tabela de roteamento os nós para serem enviadas as mensagens dos pedidos de temperatura;
				** Cada nó só conhece os proximos nós para envio da mensagem, indexados pelo identificador calculado do nó destinatario;
				** Após atualização da tabela de roteamento, a mensagem é enviada ao progenitor para que o mesmo tambem conheça o reconheça como nó intermediario para o nó destinatario;
				** As mensagens de roteamento serão enviadas a todos os progenitores até chegar a raiz.
				*/
				else/if msgRecebida.type == TIPO_ROTEAMENTO then
					emit LED1(ON);
					await 1s;
			
					var ushort index_roteamento = 0;
					loop i,(N_COLUNAS) do
						if msgRecebida.origem/10 == (i+1) then
							index_roteamento = msgRecebida.origem - (11 + i*(10-N_LINHAS));
							break;
						end
					end
					tabela_roteamento[index_roteamento] = msgRecebida.source;
					if idLocal != NO_RAIZ then
						msgRecebida.target = progenitorLocal;
						qPut(msgRecebida);
					end
			
					emit LED1(OFF);
				end
			end
			await 100ms;
		end
	end
end
